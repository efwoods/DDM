import pandas as pd
import pandas as pd
pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx")
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx")
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =4)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =5)
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =4)
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =3)
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =2)
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =4)
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =4)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =5)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =3)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =2)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =3)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =1)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =2)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =3)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =4)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =3)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =3)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =2)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =1)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =1)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =2)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =1)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =2)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =3)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =4)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =4)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name =3)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name = 4)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name = 1)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name = 1)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name = 2)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name = 1)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name = 1, header=1)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name = 1, header=0)
data
import pandas as pd
data  = pd.read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", sheet_name = 1, header=0)
data
reticulate::repl_python()
py$data
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(fig.width = 6)
knitr::opts_chunk$set(fig.asp = 0.618)
knitr::opts_chunk$set(out.width = "70%")
knitr::opts_chunk$set(fig.align = "center")
knitr::opts_chunk$set(
comment = ""
)
if(!require("readxl")) install.packages("readxl")
if(!require("tidyverse")) install.packages("tidyverse")
library(readxl)
library(tidyverse)
# """
#   Purpose: This function will create a formatted output string that wraps at 80
#            characters. It is expected to be used in conjunction with sprintf().
#            It is intended for formatted printing while knitting.
#            I.E.: f_print(sprintf())
#            Note: This function does interpret newline characters.
#   Parameters:
#            string: sprintf() wrapped string to print. I.E.: sprintf('string')
#
#   Returns: This function prints the input string.
# """
f_print <- function(string){
cat(str_wrap(string = string, width = 80, indent = 0, exdent = 0, whitespace_only = TRUE))
}
# """
# Purpose: This function calculates the cosine similarity between an arbitrary
#          row and every other row in the dataframe.
# Parameters:
#             df_column1: This is the first column of the dataframe to inspect.
#             df_column2: This is the second column of the dataframe to inspect.
#             row_n: This is the row of interest with which all other calculations
#                  are made.
# Returns: This function returns the calculated cosine similarity between an
#          arbitrary row of interest and every remaining row.
# """
cosine_similarity <- function(df_column1, df_column2, row_n) {
cosine_similarity_c <- c(integer(length(df_column1)))
for (i in seq(1, length(df_column1))){
numerator <- (df_column1[row_n] * df_column1[i]) + (df_column2[row_n] * df_column2[i])
denominator <- sqrt(sum(df_column1[row_n]^2, df_column2[row_n]^2)) * sqrt(sum(df_column1[i]^2, df_column2[i]^2))
calculated_cosine_similarity <- numerator/denominator
cosine_similarity_c[i] <- calculated_cosine_similarity
}
return(cosine_similarity_c)
}
# """
#   Purpose: Calculate predictions for missing values of courses/campaigns using collaborative filtering and the campaign that has the greatest cosine similarity
#   Parameters:
#         df: This is the original dataframe containing missing values.
#         course_column_predictor: This is the column with which to base the
#                                  predictions.
#         course_row: This is the row that contains missing values.
#         maximum_cosine_similarity_df: This is the dataframe that contains the
#                                       data of the greatest cosine similarity
#                                       with the course_row.
#   Returns:
#         predicted_df: This is the original dataframe with predicted columns.
# """
predictions_using_collaborative_filtering_and_cosine_similarity <- function(df, course_column, course_row, maximum_cosine_similarity_df){
# Allocate Intermediate Variables
pred_df <- df
# Calculate Predictions
# Predicted Paid App Submissions
predicted_col <- 'Paid App Submissions'
pred_df[course_row, predicted_col] <- as.integer((df[course_row, course_column] * (maximum_cosine_similarity_df[predicted_col] / maximum_cosine_similarity_df[course_column]) * maximum_cosine_similarity_df$cosine_similarity)[, course_column])
# Predicted Paid Enrollment
predicted_col <- 'Paid Enrollment'
pred_df[course_row, predicted_col] <- as.integer((df[course_row, course_column] * (maximum_cosine_similarity_df[predicted_col] / maximum_cosine_similarity_df[course_column]) * maximum_cosine_similarity_df$cosine_similarity)[, course_column])
# Predicted Paid Revenue
predicted_col <- 'Paid Revenue'
pred_df[course_row, predicted_col] <- as.integer((df[course_row, course_column] * (maximum_cosine_similarity_df[predicted_col] / maximum_cosine_similarity_df[course_column]) * maximum_cosine_similarity_df$cosine_similarity)[, course_column])
# Predicted RAC
predicted_col <- 'RAC'
pred_df[course_row, predicted_col] <- as.integer((df[course_row, course_column] * (maximum_cosine_similarity_df[predicted_col] / maximum_cosine_similarity_df[course_column]) * maximum_cosine_similarity_df$cosine_similarity)[, course_column])
return(pred_df)
}
digitalAdSpendByCourseFY20 <- read_excel("/Volumes/T7/Github/DDM/Unit2/Digital_Marketing_At_HBS_Online_Cleaned.xlsx", 6)
# EDA
digitalAdSpendByCourseFY20
# Transforming Paid Revenue from character to integer
digitalAdSpendByCourseFY20 <- digitalAdSpendByCourseFY20 %>% mutate(`Paid Revenue` = as.integer(`Paid Revenue`)) %>% mutate(`Paid App Submissions` = as.integer(`Paid App Submissions`)) %>% mutate(`Paid Enrollment` = as.integer(`Paid Enrollment`)) %>% mutate(`RAC` = as.integer(`RAC`))
digitalAdSpendByCourseFY20
## Identifying cosine similarities with respect to Branded and General Course/Campaign
digitalAdSpendByCourseFY20 <- digitalAdSpendByCourseFY20 %>% mutate(Branded_cosine_similarity = cosine_similarity(`Ad Spend`, `Paid Leads`, 1))
digitalAdSpendByCourseFY20 <- digitalAdSpendByCourseFY20 %>% mutate(General_cosine_similarity = cosine_similarity(`Ad Spend`, `Paid Leads`, 2))
# Greatest Cosine Similarity Between Branded
branded_max_cosine_sim <- digitalAdSpendByCourseFY20[which.max(digitalAdSpendByCourseFY20[-1,]$Branded_cosine_similarity),]
branded_max_cosine_sim <- branded_max_cosine_sim %>% select(everything(), -General_cosine_similarity) %>% rename('cosine_similarity' = 'Branded_cosine_similarity')
# Greatest Cosine Similarity Between General
general_max_cosine_sim <- digitalAdSpendByCourseFY20[which.max(digitalAdSpendByCourseFY20[-2,]$General_cosine_similarity),]
general_max_cosine_sim <- general_max_cosine_sim %>% select(everything(), -Branded_cosine_similarity) %>% rename('cosine_similarity' = 'General_cosine_similarity')
predicted_digitalAdSpendByCourseFY20 <- predictions_using_collaborative_filtering_and_cosine_similarity(digitalAdSpendByCourseFY20, 'Ad Spend', 1, branded_max_cosine_sim)
predicted_digitalAdSpendByCourseFY20 <- predictions_using_collaborative_filtering_and_cosine_similarity(predicted_digitalAdSpendByCourseFY20, 'Ad Spend', 2, general_max_cosine_sim)
f_print(sprintf("Predicted Values of the Branded Course/Campaign Using Collaborative Filtering & Cosine Similarity:"))
cat("\n\n")
f_print(sprintf("Course with the Largest Cosine Similarity: %s",branded_max_cosine_sim$`Course/Campaign`))
cat("\n")
f_print(sprintf("Cosine Similarity: %0.9f",branded_max_cosine_sim$cosine_similarity))
cat("\n")
f_print(sprintf("Branded Predicted Paid App Submissions: %0.0f",predicted_digitalAdSpendByCourseFY20[1,'Paid App Submissions']))
cat("\n")
f_print(sprintf("Branded Predicted Paid Enrollment: %0.0f",predicted_digitalAdSpendByCourseFY20[1,'Paid Enrollment']))
cat("\n")
f_print(sprintf("Branded Predicted Paid Revenue: %0.0f",predicted_digitalAdSpendByCourseFY20[1,'Paid Revenue']))
cat("\n")
f_print(sprintf("Branded Predicted RAC: %0.0f",predicted_digitalAdSpendByCourseFY20[1,'RAC']))
cat("\n\n")
f_print(sprintf("Predicted Values of the General Course/Campaign Using Collaborative Filtering & Cosine Similarity:"))
cat("\n\n")
f_print(sprintf("Course with the Largest Cosine Similarity: %s",general_max_cosine_sim$`Course/Campaign`))
cat("\n")
f_print(sprintf("Cosine Similarity: %0.9f",general_max_cosine_sim$cosine_similarity))
cat("\n")
f_print(sprintf("General Predicted Paid App Submissions: %0.0f",predicted_digitalAdSpendByCourseFY20[2,'Paid App Submissions']))
cat("\n")
f_print(sprintf("General Predicted Paid Enrollment: %0.0f",predicted_digitalAdSpendByCourseFY20[2, 'Paid Enrollment']))
cat("\n")
f_print(sprintf("General Predicted Paid Revenue: %0.0f",predicted_digitalAdSpendByCourseFY20[2,'Paid Revenue']))
cat("\n")
f_print(sprintf("General Predicted RAC: %0.0f",predicted_digitalAdSpendByCourseFY20[2,'RAC']))
predicted_digitalAdSpendByCourseFY20 %>% select(`Course/Campaign`, `Ad Spend`, `Paid App Submissions`, `Paid Enrollment`, `Paid Revenue`)
predicted_digitalAdSpendByCourseFY20 %>% select(`Course/Campaign`,`RAC`)
f_print(sprintf("The predicted values for the Branded and General courses are higher than other courses/campaigns, but the values do not seem to be obvious outliers except for the RAC. The predicted RACs are inordinately high with respect to the other values in the same column."))
digitalAdSpendByCourseFY20_soln <- read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post.xlsx", 5)
digitalAdSpendByCourseFY20_soln
reticulate::repl_python()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(fig.width = 6)
knitr::opts_chunk$set(fig.asp = 0.618)
knitr::opts_chunk$set(out.width = "70%")
knitr::opts_chunk$set(fig.align = "center")
knitr::opts_chunk$set(
comment = ""
)
if(!require("readxl")) install.packages("readxl")
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("keras")) install.packages("keras")
if(!require("reticulate")) install.packages("reticulate") # Use python objects in R
library(keras)
reticulate::use_condaenv(condaenv = "r-tensorflow")
library(magrittr)
library(readxl)
library(tidyverse)
# """
#   Purpose: This function will create a formatted output string that wraps at 80
#            characters. It is expected to be used in conjunction with sprintf().
#            It is intended for formatted printing while knitting.
#            I.E.: f_print(sprintf())
#            Note: This function does interpret newline characters.
#   Parameters:
#            string: sprintf() wrapped string to print. I.E.: sprintf('string')
#
#   Returns: This function prints the input string.
# """
f_print <- function(string){
cat(str_wrap(string = string, width = 80, indent = 0, exdent = 0, whitespace_only = TRUE))
}
# """
# Purpose: This function calculates the cosine similarity between an arbitrary
#          row and every other row in the dataframe.
# Parameters:
#             df_column1: This is the first column of the dataframe to inspect.
#             df_column2: This is the second column of the dataframe to inspect.
#             row_n: This is the row of interest with which all other calculations
#                  are made.
# Returns: This function returns the calculated cosine similarity between an
#          arbitrary row of interest and every remaining row.
# """
cosine_similarity <- function(df_column1, df_column2, row_n) {
cosine_similarity_c <- c(integer(length(df_column1)))
for (i in seq(1, length(df_column1))){
numerator <- (df_column1[row_n] * df_column1[i]) + (df_column2[row_n] * df_column2[i])
denominator <- sqrt(sum(df_column1[row_n]^2, df_column2[row_n]^2)) * sqrt(sum(df_column1[i]^2, df_column2[i]^2))
calculated_cosine_similarity <- numerator/denominator
cosine_similarity_c[i] <- calculated_cosine_similarity
}
return(cosine_similarity_c)
}
# """
#   Purpose: Calculate predictions for missing values of courses/campaigns using collaborative filtering and the campaign that has the greatest cosine similarity
#   Parameters:
#         df: This is the original dataframe containing missing values.
#         course_column_predictor: This is the column with which to base the
#                                  predictions.
#         course_row: This is the row that contains missing values.
#         maximum_cosine_similarity_df: This is the dataframe that contains the
#                                       data of the greatest cosine similarity
#                                       with the course_row.
#   Returns:
#         predicted_df: This is the original dataframe with predicted columns.
# """
predictions_using_collaborative_filtering_and_cosine_similarity <- function(df, course_column, course_row, maximum_cosine_similarity_df){
# Allocate Intermediate Variables
pred_df <- df
# Calculate Predictions
# Predicted Paid App Submissions
predicted_col <- 'Paid App Submissions'
pred_df[course_row, predicted_col] <- as.integer((df[course_row, course_column] * (maximum_cosine_similarity_df[predicted_col] / maximum_cosine_similarity_df[course_column]) * maximum_cosine_similarity_df$cosine_similarity)[, course_column])
# Predicted Paid Enrollment
predicted_col <- 'Paid Enrollment'
pred_df[course_row, predicted_col] <- as.integer((df[course_row, course_column] * (maximum_cosine_similarity_df[predicted_col] / maximum_cosine_similarity_df[course_column]) * maximum_cosine_similarity_df$cosine_similarity)[, course_column])
# Predicted Paid Revenue
predicted_col <- 'Paid Revenue'
pred_df[course_row, predicted_col] <- as.integer((df[course_row, course_column] * (maximum_cosine_similarity_df[predicted_col] / maximum_cosine_similarity_df[course_column]) * maximum_cosine_similarity_df$cosine_similarity)[, course_column])
# Predicted RAC
predicted_col <- 'RAC'
pred_df[course_row, predicted_col] <- as.integer((df[course_row, course_column] * (maximum_cosine_similarity_df[predicted_col] / maximum_cosine_similarity_df[course_column]) * maximum_cosine_similarity_df$cosine_similarity)[, course_column])
return(pred_df)
}
digitalAdSpendByCourseFY20 <- read_excel("/Volumes/T7/Github/DDM/Unit2/Digital_Marketing_At_HBS_Online_Cleaned.xlsx", 6)
# EDA
digitalAdSpendByCourseFY20
# Transforming Paid Revenue from character to integer
digitalAdSpendByCourseFY20 <- digitalAdSpendByCourseFY20 %>% mutate(`Paid Revenue` = as.integer(`Paid Revenue`)) %>% mutate(`Paid App Submissions` = as.integer(`Paid App Submissions`)) %>% mutate(`Paid Enrollment` = as.integer(`Paid Enrollment`)) %>% mutate(`RAC` = as.integer(`RAC`))
digitalAdSpendByCourseFY20
## Identifying cosine similarities with respect to Branded and General Course/Campaign
digitalAdSpendByCourseFY20 <- digitalAdSpendByCourseFY20 %>% mutate(Branded_cosine_similarity = cosine_similarity(`Ad Spend`, `Paid Leads`, 1))
digitalAdSpendByCourseFY20 <- digitalAdSpendByCourseFY20 %>% mutate(General_cosine_similarity = cosine_similarity(`Ad Spend`, `Paid Leads`, 2))
# Greatest Cosine Similarity Between Branded
branded_max_cosine_sim <- digitalAdSpendByCourseFY20[which.max(digitalAdSpendByCourseFY20[-1,]$Branded_cosine_similarity),]
branded_max_cosine_sim <- branded_max_cosine_sim %>% select(everything(), -General_cosine_similarity) %>% rename('cosine_similarity' = 'Branded_cosine_similarity')
# Greatest Cosine Similarity Between General
general_max_cosine_sim <- digitalAdSpendByCourseFY20[which.max(digitalAdSpendByCourseFY20[-2,]$General_cosine_similarity),]
general_max_cosine_sim <- general_max_cosine_sim %>% select(everything(), -Branded_cosine_similarity) %>% rename('cosine_similarity' = 'General_cosine_similarity')
predicted_digitalAdSpendByCourseFY20 <- predictions_using_collaborative_filtering_and_cosine_similarity(digitalAdSpendByCourseFY20, 'Ad Spend', 1, branded_max_cosine_sim)
predicted_digitalAdSpendByCourseFY20 <- predictions_using_collaborative_filtering_and_cosine_similarity(predicted_digitalAdSpendByCourseFY20, 'Ad Spend', 2, general_max_cosine_sim)
f_print(sprintf("Predicted Values of the Branded Course/Campaign Using Collaborative Filtering & Cosine Similarity:"))
cat("\n\n")
f_print(sprintf("Course with the Largest Cosine Similarity: %s",branded_max_cosine_sim$`Course/Campaign`))
cat("\n")
f_print(sprintf("Cosine Similarity: %0.9f",branded_max_cosine_sim$cosine_similarity))
cat("\n")
f_print(sprintf("Branded Predicted Paid App Submissions: %0.0f",predicted_digitalAdSpendByCourseFY20[1,'Paid App Submissions']))
cat("\n")
f_print(sprintf("Branded Predicted Paid Enrollment: %0.0f",predicted_digitalAdSpendByCourseFY20[1,'Paid Enrollment']))
cat("\n")
f_print(sprintf("Branded Predicted Paid Revenue: %0.0f",predicted_digitalAdSpendByCourseFY20[1,'Paid Revenue']))
cat("\n")
f_print(sprintf("Branded Predicted RAC: %0.0f",predicted_digitalAdSpendByCourseFY20[1,'RAC']))
cat("\n\n")
f_print(sprintf("Predicted Values of the General Course/Campaign Using Collaborative Filtering & Cosine Similarity:"))
cat("\n\n")
f_print(sprintf("Course with the Largest Cosine Similarity: %s",general_max_cosine_sim$`Course/Campaign`))
cat("\n")
f_print(sprintf("Cosine Similarity: %0.9f",general_max_cosine_sim$cosine_similarity))
cat("\n")
f_print(sprintf("General Predicted Paid App Submissions: %0.0f",predicted_digitalAdSpendByCourseFY20[2,'Paid App Submissions']))
cat("\n")
f_print(sprintf("General Predicted Paid Enrollment: %0.0f",predicted_digitalAdSpendByCourseFY20[2, 'Paid Enrollment']))
cat("\n")
f_print(sprintf("General Predicted Paid Revenue: %0.0f",predicted_digitalAdSpendByCourseFY20[2,'Paid Revenue']))
cat("\n")
f_print(sprintf("General Predicted RAC: %0.0f",predicted_digitalAdSpendByCourseFY20[2,'RAC']))
predicted_digitalAdSpendByCourseFY20 %>% select(`Course/Campaign`, `Ad Spend`, `Paid App Submissions`, `Paid Enrollment`, `Paid Revenue`)
predicted_digitalAdSpendByCourseFY20 %>% select(`Course/Campaign`,`RAC`)
f_print(sprintf("The predicted values for the Branded and General courses are higher than other courses/campaigns, but the values do not seem to be obvious outliers except for the RAC. The predicted RACs are inordinately high with respect to the other values in the same column."))
digitalAdSpendByCourseFY20_soln <- read_excel("/Volumes/T7/Github/DDM/Unit2/HBS Online Solution to post 2.xlsx", sheet = 5, col_types = NULL, col_names = TRUE, skip = 3)
digitalAdSpendByCourseFY20_soln
digitalAdSpendByCourseFY20_soln %<>% mutate(`ROI (no cross-over)` = as.integer(`ROI (no cross-over)`))
data <- as.matrix(digitalAdSpendByCourseFY20_soln)
dimnames(data) <- NULL
dim(data)
if(!require("pracma")) install.packages("pracma")
library("pracma")
value <- as.integer(data[,2:ncol(data)])
data_matrix <- Reshape(value, 17, 24)
test <- data_matrix[1:2, ]
train <- data_matrix[-c(1,2),]
# Creating the test sets
x_test <- test[,1:23]
x_test
# Creating training & validation sets
idx <- sample(2, nrow(train), replace = TRUE, prob = c(.7, .3))
x_train <- train[idx==1, 1:23]
y_train <- train[idx==1, 24]
x_val <- train[idx==2, 1:23]
y_val <- train[idx==2, 24]
x_train
y_train
x_val
y_val
y_val_cat <- to_categorical(y_val)
y_val_cat
# Predicting ROI
# Scaling
m <- colMeans(x_train)
s <- apply(x_train, 2, sd)
x_train_scaled <- scale(x_train, center = m, scale = s)
x_val_scaled <- scale(x_val, center = m, scale = s)
# Model Creation
model <- keras_model_sequential()
model %>% layer_dense(units = 5, activation = 'relu', input_shape = c(23)) %>% layer_dense(units = 10, activation = 'softmax')
# Model Compilation
model %>% compile(loss = 'mse',
optimizer = 'rmsprop',
metrics = 'accuracy')
# Prediction
model %>% evaluate(x_train_scaled, y_train)
pred <- model %>% predict(x_val_scaled)
prediction_c <- c(integer(nrow(pred)))
for (i in seq(1, nrow(pred)))
prediction_c[i] <- which.max(pred[i,])
val_truth_c <- c(integer(nrow(y_val_cat)))
for (i in seq(1, nrow(y_val_cat)))
val_truth_c[i] <- which.max(y_val_cat[i,])
acc <- (val_truth_c - prediction_c)
for (i in seq(1,length(acc))){
if (near(acc[i], 0)){
acc[i] <- 1
} else {
acc[i] <- 0
}
}
acc
# y_train <-to_categorical(y_train)
x_train
x_val
y_train
y_val
reticulate::repl_python()
